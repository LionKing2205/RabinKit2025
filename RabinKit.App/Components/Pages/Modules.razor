@page "/module/{moduleId:long}"

@using RabinKit.Core.Entities
@using Microsoft.EntityFrameworkCore
@inject IDbContext DbContext

<SectionContent SectionId="@Layout.MainLayout.TopbarSection">
    @switch (moduleId)
    {
        case 1:
            <h3 class="text-center" Style="width: 100%;">Шифрование сообщения законным пользователем</h3>
            break;
        case 2:
            <h3 class="text-center" Style="width: 100%;">Расшифровка сообщения законным пользователем</h3>
            break;
        case 3:
            <h3 class="text-center" Style="width: 100%;">Снятие неоднозначности при декодировании</h3>
            break;
        case 4:
            <h3 class="text-center" Style="width: 100%;">Расшифровка сообщения незаконным пользователем</h3>
            break;
        default:
            <h3 class="text-center" Style="width: 100%;">Неверный модуль</h3>
            ;
            break;
    }
</SectionContent>
<MudButton Variant="Variant.Filled" Href="/" Color="Color.Primary">Назад</MudButton>
<MudContainer>
    <MudTable Items="@tasks" Striped="true" Hover="true">
        <HeaderContent>
            <MudTh Width="200px">Открыть</MudTh>
            <MudTh>Задача</MudTh>
            <MudTh>Статус</MudTh>
            <MudTh>Время решения</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudButton Class="no-wrap" Variant="Variant.Filled" Color="Color.Primary" Href="@($"/module/{moduleId}/{@context.TaskNumber}")">
                    @($"Задача {@context.TaskNumber / 10}.{@context.TaskNumber % 10}")
                </MudButton>
            </MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.IsPassed</MudTd>
            <MudTd>@context.SolutionTime</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>


@code {
    private List<TaskComponent> _task = default!;
    private List<TaskStatusR> _status = default;
    private List<TaskItem> tasks = new List<TaskItem>();
    [Parameter] public long moduleId { get; set; }
    private int taskCount;

    private long a;
    private long b;
    protected override async Task OnInitializedAsync()
    {
        a = moduleId * 10 - 1;
        b = moduleId * 10 + 10;
        var c = Convert.ToInt16(moduleId) * 10;
        taskCount = DbContext.TaskComponents
                            .Count(e => e.Id > a && e.Id < b);

        _status = await DbContext.TaskStatus.ToListAsync();
        _task = await DbContext.TaskComponents.ToListAsync();

        for (int i = c + 1; i <= taskCount + c; i++)
        {
            var taskItem = _task.FirstOrDefault(t => t.Id == i);
            var taskStatus = _status.FirstOrDefault(t => t.TaskId == i);
            if (!taskItem.IsTest)
            {
                var existingTask = tasks.FirstOrDefault(t => t.TaskNumber == i);

                if (existingTask != null)
                {
                    existingTask.Name = taskItem.Name;
                    existingTask.IsPassed = PassedText(taskStatus.IsPassed);
                    existingTask.SolutionTime = taskStatus.SolutionTime.ToString(@"hh:mm:ss");
                }
                else
                {
                    tasks.Add(new TaskItem
                        {
                            TaskNumber = i,
                            Name = taskItem.Name,
                            IsPassed = PassedText(taskStatus.IsPassed),
                            SolutionTime = taskStatus.SolutionTime.ToString(@"hh\:mm\:ss")
                        });
                }
            }
        }

    }

    private string PassedText(bool isPassed)
    {
        return isPassed ? "Решено" : "Не решено";
    }

    // private void NavigateToTask(long moduleId, int taskNumber)
    // {
    //     NavigationManager.NavigateTo($"/module/{moduleId}/{moduleId * 10 + taskNumber}");
    // }

    public class TaskItem
    {
        public int TaskNumber { get; set; }
        public string Name { get; set; }
        public string IsPassed { get; set; }
        public string SolutionTime { get; set; }
    }
}



