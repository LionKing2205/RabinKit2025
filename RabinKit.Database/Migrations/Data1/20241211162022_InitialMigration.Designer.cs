// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RabinKit.Database.Models;

#nullable disable

namespace RabinKit.Database.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20241211162022_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("RabinKit.Database.Models.PerformanceTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PrepareScript")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("prepare_script");

                    b.Property<int>("TaskDescriptionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_description_id");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskDescriptionId" }, "ix_performance_tests_task_description_id");

                    b.ToTable("performance_tests", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.PerformanceTestAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("PerformanceTestId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("performance_test_id");

                    b.Property<string>("Runs")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("runs");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PerformanceTestId" }, "ix_performance_test_attempts_performance_test_id");

                    b.ToTable("performance_test_attempts", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT")
                        .HasColumnName("group");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<string>("Year")
                        .HasColumnType("TEXT")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_students_Id")
                        .IsUnique();

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Inputs")
                        .HasColumnType("TEXT")
                        .HasColumnName("inputs");

                    b.Property<int>("IsPassed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_passed");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("result");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_task_attempts_id")
                        .IsUnique();

                    b.HasIndex(new[] { "TaskId" }, "ix_task_attempts_task_components_id");

                    b.ToTable("task_attempts", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskComponent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("input");

                    b.Property<string>("IsTest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("is_test")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("NUMERIC")
                        .HasColumnName("output");

                    b.Property<string>("Playground")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("playground");

                    b.Property<string>("Toolbox")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("toolbox");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_task_components_id")
                        .IsUnique();

                    b.ToTable("task_components", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<int>("IsPassed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_passed");

                    b.Property<TimeSpan?>("SolutionTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("solution_time");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_task_status_id")
                        .IsUnique();

                    b.HasIndex(new[] { "TaskId" }, "IX_task_status_task_id")
                        .IsUnique();

                    b.ToTable("task_status", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskTestAttemptRelation", b =>
                {
                    b.Property<int>("AttemptId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attempt_id");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("test_id");

                    b.Property<int>("Result")
                        .HasColumnType("INTEGER")
                        .HasColumnName("result");

                    b.HasKey("AttemptId", "TestId");

                    b.HasIndex(new[] { "TestId" }, "ix_task_test_attempt_relations_test_id");

                    b.ToTable("task_test_attempt_relations", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.TestValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("InputVars")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("input_vars");

                    b.Property<string>("OutputVars")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("output_vars");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskId" }, "ix_test_values_task_components_id");

                    b.ToTable("test_values", (string)null);
                });

            modelBuilder.Entity("RabinKit.Database.Models.PerformanceTest", b =>
                {
                    b.HasOne("RabinKit.Database.Models.TaskComponent", "TaskDescription")
                        .WithMany("PerformanceTests")
                        .HasForeignKey("TaskDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskDescription");
                });

            modelBuilder.Entity("RabinKit.Database.Models.PerformanceTestAttempt", b =>
                {
                    b.HasOne("RabinKit.Database.Models.PerformanceTest", "PerformanceTest")
                        .WithMany("PerformanceTestAttempts")
                        .HasForeignKey("PerformanceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceTest");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskAttempt", b =>
                {
                    b.HasOne("RabinKit.Database.Models.TaskComponent", "Task")
                        .WithMany("TaskAttempts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskTestAttemptRelation", b =>
                {
                    b.HasOne("RabinKit.Database.Models.TaskAttempt", "Attempt")
                        .WithMany("TaskTestAttemptRelations")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RabinKit.Database.Models.TestValue", "Test")
                        .WithMany("TaskTestAttemptRelations")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TestValue", b =>
                {
                    b.HasOne("RabinKit.Database.Models.TaskComponent", "Task")
                        .WithMany("TestValues")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RabinKit.Database.Models.PerformanceTest", b =>
                {
                    b.Navigation("PerformanceTestAttempts");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskAttempt", b =>
                {
                    b.Navigation("TaskTestAttemptRelations");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TaskComponent", b =>
                {
                    b.Navigation("PerformanceTests");

                    b.Navigation("TaskAttempts");

                    b.Navigation("TestValues");
                });

            modelBuilder.Entity("RabinKit.Database.Models.TestValue", b =>
                {
                    b.Navigation("TaskTestAttemptRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
